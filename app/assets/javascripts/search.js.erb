var app;

app = angular.module("search", ["ngResource", "ui.bootstrap","truncate","ui.slider","localytics.directives","searchFilters"]).config([
  "$routeProvider", "$httpProvider", function($routeProvider, $httpProvider) {
    return $routeProvider.when("/", {
      templateUrl: '<%= asset_path("search-list.html") %>',
      controller: SearchCtrl
    }).otherwise({
      redirectTo: "/"
    }, function($httpProvider) {
      return $httpProvider.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest";
    });
  }
]).
// Infinite scroll/pagination, this "directive" binds to the view
// in the application HTML, "when-scrolled" is hooked up to "whenScrolled" here
directive('whenScrolled', function() {
	
	return function(scope, elm, attr) {
      var raw = elm[0];
 
      // bind function to the 'scroll' event
      // we listen to the 'scroll' event and calculate when to call the method attached to "when-scrolled"
      // if you recall our HTML page, we have: when-scrolled="load_data()"
      // in our application script we defined "load_data()"
      elm.bind('scroll', function() {
        // calculating the time/space continuum needed to trigger the loading of the next pagination
        if (raw.scrollTop + raw.offsetHeight >= raw.scrollHeight) {
          // from the AngularJS documentation:
          // http://docs.angularjs.org/api/ng.$rootScope.Scope#$apply
          // $apply() is used to execute an expression in angular from outside 
          // of the angular framework. (For example from browser DOM events, setTimeout, 
          // XHR or third party libraries). Because we are calling into the angular 
          // framework we need to perform proper scope life-cycle of 
          // exception handling, executing watches.
          scope.$apply(attr.whenScrolled);
        }
      });
    };
});

app.factory("Search", [
  "$resource", function($resource) {
    return $resource("/search/page/:id", {
      id: "@id" 
    }, {
      update: {
        method: "PUT"
      }
    });
  }
]);

this.SearchCtrl = [
  "$scope", "$resource", "$route", "$routeParams", "$location", "Search", function($scope, $resource, $route, $routeParams, $location, Search) {
    
    $scope.experts = Search.query({id: 1});
    $scope.facetsa = "test";
    
    //Initializing rating elements
    $scope.rate = 2.5;
	$scope.max = 5;
	$scope.isReadonly = true;
	
	$scope.hoveringOver = function(value) {
	  $scope.overStar = value;
	  $scope.percent = 100 * (value / $scope.max);
	};
	
	$scope.ratingStates = [
	  {stateOn: 'icon-ok-sign', stateOff: 'icon-ok-circle'},
	  {stateOn: 'icon-star', stateOff: 'icon-star-empty'},
	  {stateOn: 'icon-heart', stateOff: 'icon-ban-circle'},
	  {stateOn: 'icon-heart'},
	  {stateOff: 'icon-off'}
	];
		 
	$scope.model = {facets: [] };
  }
];

this.SearchDetailCtrl = [
  "$scope", "$resource", "$route", "$routeParams", "$location", "Search", function($scope, $resource, $route, $routeParams, $location, Search) {
    
    $scope.pg_counter = 1;
	$scope.update = function(value) {
	    $scope.model.facets = value;
	};
	  
    $scope.load_data = function() {
      var keyword = ""	
	  if( typeof $scope.query.$ !== 'undefined' ) 
		keyword = $scope.query.$;
	  	
	  var skill_list = ""	
	  if( typeof $scope.query.skill_list !== 'undefined' ) 
		skill_list = $scope.query.skill_list;
		
	  var location = ""	
	  if( typeof $scope.query.location !== 'undefined' ) 
		location = $scope.query.location;
	  
	  $scope.search_params = {id: $scope.pg_counter++, keyword: keyword, tag: skill_list, location: location};
	  		
	  Search.get($scope.search_params, function (new_experts) {
        //new data is available in the callback to insert to the experts ng-model
        $scope.experts.push.apply($scope.experts, new_experts.results);
        $scope.facets = new_experts.facets;
        console.log($scope.facets);
      });
    };
    
    $scope.load_data_with_params = function(params) {
	  $scope.experts = [];
	  console.log('length '+$scope.experts.length);
	  Search.get(params, function (new_experts) {
        $scope.experts = new_experts.results;
        console.log('length '+$scope.experts.length);
        $scope.update(new_experts.facets);
      });
    };
    
	$scope.getFilteredValues = function() {
	  
	  var keyword = ""	
	  if( typeof $scope.query.$ !== 'undefined' ) 
		keyword = $scope.query.$;
	  	
	  var skill_list = ""	
	  if( typeof $scope.query.skill_list !== 'undefined' ) 
		skill_list = $scope.query.skill_list;
		
	  var location = ""	
	  if( typeof $scope.query.location !== 'undefined' ) 
		location = $scope.query.location;
	  
	  $scope.pg_counter = 1;		
	  $scope.search_params = {id: $scope.pg_counter, keyword: keyword, tag: skill_list, location: location};
	  $scope.load_data_with_params($scope.search_params);
	  
	};
	
  }
];


	
